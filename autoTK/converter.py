import datetime


class Converter:
    def __init__(self, classname, size, onclicks,bg):
        self.structure = {"size": size, "onclicks": onclicks}
        self.name = classname
        self.bg = bg
    def _get_onclicks_for_buttons(self, btn_list):
        funcs = []
        for btn in btn_list:
            code = f"\n\tdef {btn.name}_onclick(self):\n\t\tprint(\"{btn.name}" \
                   f" Clicked!\")\n\t\t# your code here...\n\t\t..."
            funcs.append(code)
        return "\n\t".join(funcs)

    def _get_descriptions(self):
        return f"\"\"\"This code has generated by AutoTK.\ndate:{datetime.datetime.now()} \"\"\"\n\n"

    def _get_main_template(self):
        return f"if __name__ == '__main__':\n\t" \
               f"root = tk.Tk()\n\t" \
               f"gui = {self.name.capitalize()}(root)\n\t" \
               f"root.geometry('{self.structure['size']}')" \
               f"\n\tgui.load()\n\troot.mainloop()"

    def _get_base_template(self):
        return "import tkinter as tk" \
               f"\n\nclass {self.name.capitalize()}:\n" \
               f"\tdef __init__(self,win):\n" \
               f"\t\tself.win = win\n\t\tself.win.config(bg= \"{self.bg}\")\n\t\t"

    def create_structure(self, attributes, statements):
        print("*" * 100, attributes)
        top_template = self._get_base_template()
        top_template += "".join(attributes)

        load_func = "\n\tdef load(self):\n\t\t"
        load_func += "".join(statements)

        return f"{self._get_descriptions()}{top_template}\n{load_func}\
        \n{self._get_onclicks_for_buttons(self.structure['onclicks'])}\n{self._get_main_template()}"
